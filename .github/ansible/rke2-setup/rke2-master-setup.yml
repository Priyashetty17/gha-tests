- name: Setup Initial RKE2 Master Node
  hosts: rke2_master
  become: yes
  gather_facts: false
  # The `terraform_state_file` variable will be provided by the workflow's --extra-vars flag.
  # The `rancher_hostname_prefix` is also passed in the same way.
  vars:
    # This variable is passed directly from the GitHub Actions workflow.
    # It contains the full path to the `terraform.tfstate` file.
    terraform_state_file: "{{ terraform_state_file }}"
    rancher_hostname_prefix: "{{ rancher_hostname_prefix }}"
    node_token_file: "/tmp/node_token.txt"
    kubeconfig_file: "/tmp/kubeconfig.yaml"
  
  tasks:
    - name: Create RKE2 config directory
      ansible.builtin.file:
        path: /etc/rancher/rke2
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Write RKE2 config.yaml file with TLS SANs
      ansible.builtin.copy:
        content: |
          tls-san:
            - "{{ lookup('cloud.terraform.tf_output', 'first_node_public_dns', state_file=terraform_state_file, tf_binary='tofu') }}"
            - "{{ lookup('cloud.terraform.tf_output', 'first_node_public_dns', state_file=terraform_state_file, tf_binary='tofu') }}"
          kube-apiserver-arg:
            - "--anonymous-auth=true"
        dest: /etc/rancher/rke2/config.yaml
        owner: root
        group: root
        mode: '0600'

    - name: Ensure correct Kubernetes version is used (robust installation)
      block:
        - name: Download RKE2 image tarball
          ansible.builtin.get_url:
            url: "https://github.com/rancher/rke2/releases/download/{{ kubernetes_version }}/rke2-images.linux-amd64.tar.gz"
            dest: "/tmp/rke2-images.linux-amd64.tar.gz"
            mode: '0644'
    
        - name: Install RKE2 using local images
          ansible.builtin.shell: |
            curl -sfL https://get.rke2.io | INSTALL_RKE2_VERSION={{ kubernetes_version }} INSTALL_RKE2_SKIP_DOWNLOAD=true sh -
          args:
            creates: /usr/local/bin/rke2
          environment:
            RKE2_INSTALL_IMAGE: "/tmp/rke2-images.linux-amd64.tar.gz"

        - name: Clean up RKE2 image tarball
          ansible.builtin.file:
            path: /tmp/rke2-images.linux-amd64.tar.gz
            state: absent
    
    - name: Reload systemd to recognize new RKE2 service file
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Ensure clean RKE2 etcd data directory for reliable startup
      ansible.builtin.file:
        path: /var/lib/rancher/rke2/server/db
        state: absent

    - name: Start RKE2 server service
      ansible.builtin.systemd:
        name: rke2-server
        state: started
        enabled: yes
      register: service_start_result
      retries: 10
      delay: 10
      until: service_start_result is succeeded

    - name: Wait for the RKE2 service to be fully active and listening
      ansible.builtin.uri:
        url: "https://127.0.0.1:6443/readyz"
        method: GET
        validate_certs: false
      register: readyz_check
      until: readyz_check.status == 200
      retries: 20
      delay: 30

    - name: Get token file content
      block:
        - name: Get token file content
          ansible.builtin.slurp:
            src: /var/lib/rancher/rke2/server/node-token
          register: token_content
        
        - name: Save token to local file
          ansible.builtin.copy:
            content: "{{ token_content.content | b64decode }}"
            dest: "{{ node_token_file }}"
            mode: '0644'
          delegate_to: localhost
          run_once: true

    - name: Wait for kubeconfig file to be created and populated
      ansible.builtin.wait_for:
        path: /etc/rancher/rke2/rke2.yaml
        search_regex: "clusters:"
        timeout: 300

    - name: Get the contents of the kubeconfig file from the master node
      ansible.builtin.slurp:
        src: /etc/rancher/rke2/rke2.yaml
      register: kubeconfig_content
      
    - name: Save kubeconfig content to local file
      ansible.builtin.copy:
        content: "{{ kubeconfig_content.content | b64decode }}"
        dest: "{{ kubeconfig_file }}"
        mode: '0644'
      delegate_to: localhost
      run_once: true

    - name: Update kubeconfig server address for remote access
      ansible.builtin.replace:
        path: "{{ kubeconfig_file }}"
        regexp: 'https://127.0.0.1:6443'
        replace: "https://{{ lookup('cloud.terraform.tf_output', 'first_node_public_dns', state_file=terraform_state_file, tf_binary='tofu') }}:6443"
      delegate_to: localhost
      run_once: true

